# Help contents for the META shell
content:
  - entry: CONSOLE_HELP
    help: |
      The META shell accepts the following commands

      === Shell commands ===

        exit
     
      === Query commands ===

        create
        update
        insert
        insert into
        alter
        truncate
        drop
        select
        add
        list
        remove udf
        delete
        set options
        explain plan
        stop

      === META related help ===
      
        datatypes

      For more information use
      
      > help <command>
      
  - entry: EXIT
    help: Exit from the META shell.
  - entry: DATATYPES
    help: The following data types are supported by META...
  - entry: CREATE
    help: |
      The CREATE command can be used with different targets. For
      more information check one of the following:
      
        > help create keyspace
        > help create table
        > help create index

  - entry: CREATE_KEYSPACE
    help: |
      Create a new keyspace on the system specifying its replication properties.
      
      Syntax:

        CREATE KEYSPACE (IF NOT EXISTS)? <keyspace_name> 
          WITH replication = <options_map>
          (AND durable_writes = <boolean>)?;

      As of Cassandra 2.0.x, the replication class can be SimpleStrategy for
      single datacenter deployments, or NetworkTopologyStrategy for a multi-
      datacenter setup. 

      Example:

        CREATE KEYSPACE key_space1
          WITH replication = {class: SimpleStrategy, replication_factor: 3}
          AND durable_writes = false;
      
  - entry: CREATE_TABLE
    help: |
      Create a new table on the selected keyspace.
      
      Syntax:
      
        CREATE TABLE (IF NOT EXISTS)? <tablename> (
          column_name_0 column_type,
          ... ,
          column_name_n column_type,
          PRIMARY KEY (<primary_key>);

        The <primary_key> can take two forms:
        
        1. A list of columns in the form of (column_name_0, ..., column_name_m), 
           where column_name_0 is the partition key, and columns 1 to n are part
           of the clustering key.

        2. A separated list of columns for the partition and clustering keys in
           the form of ((column_name_0, column_name_1), column_name_2, ...,
           column_name_n), where columns 0 and 1 are part of the partition key,
           and columns 2 to n are part of the clustering key.

      Example:
      
        CREATE TABLE table1 (
           user_id      int,
           location_id  int,
           message      text,
           verified     bool,
           PRIMARY KEY (user_id, location_id)
           ); 

      For more information about the supported column types:
        > help datatypes

  - entry: CREATE_INDEX
    help: |
      Create an index on a set of columns of a table.
      
      Syntax:
      
        CREATE (<index_type>)? INDEX (IF NOT EXISTS)?
          <index_name>? ON <tablename> (
          column_name_i, ..., column_name_k )
          (USING <class_name>)?
          (WITH OPTIONS <option_map>)?
      
        The CREATE INDEX operation supports two types of indexes
        
        - DEFAULT: The classic Cassandra index that is able to index a
          single column but do not supports range queries.
        - LUCENE: An index backed by Lucene that permits to index a set of
          columns. An internal Lucene index is created for each specified
          columns. With the use of WITH OPTIONS the user can specify the
          mapping options of the different columns.

      Example:
        
        CREATE INDEX index1 ON table1 (field1, field2);
      
      For more information about specific types of indexes:
      
      > help create lucene index

  - entry: CREATE_LUCENE_INDEX
    help: |
      Create Lucene backed index on a set of columns. For each column, the
      a Lucene index is created using the data type specified in the table
      schema. Additionally, the user can modify the mapping with the use of
      the WITH OPTIONS statement.
      
      Syntax:
        CREATE LUCENE INDEX (IF NOT EXISTS)?
          <index_name>? ON <tablename> (
          column_name_i, ..., column_name_k )
          (USING <class_name>)?
          (WITH OPTIONS <option_map>)?

      For more information about the Lucene options, check the current
      documentation:
      
        http://lucene.apache.org/core/documentation.html

      Example:

      
  - entry: UPDATE
    help: |
      Update a column in a row
      
      Syntax:
        UPDATE <tablename> ( USING <option_map> )?
        SET <assignment> ( , <assignment> )*
        WHERE <where-clause>
        (IF <identifier> = <term> ( AND <identifier> = <term> )* )? ;
      
        where
        - USING <option_map> permits to specify a duration for the TIMESTAMP
          in microseconds, or the TTL in seconds.
        - IF <identifier> = <term> permits to specify the value that a column
          must contain in order to make the update. This option is related
          with the lightweight transaction support of Cassandra.
      
      Example:
      
        UPDATE table1 USING TTL = 400
          SET field1 = value1, field2 = value2
          WHERE field3 = value3 AND field4 = value4
          IF field5 = transaction_value;
      
      For more information about the use of IF check:
      
      http://www.datastax.com/dev/blog/lightweight-transactions-in-cassandra-2-0
      
  - entry: INSERT_INTO
    help: |
      Insert new values in a table of the keyspace
      
      Syntax:
        INSERT INTO <tablename> ( <column_name_0>, ..., <column_name_i> )
          (
            <select-clause>
           | VALUES ( <value_0>, ..., <value_i>)
          )
          (IF NOT EXISTS)?
          (USING <option_map>)? ;

      
      Example:
        INSERT INTO mykeyspace.tablename (column1, column2)
          VALUES(value1, value2)
          IF NOT EXISTS
          USING TTL = 10;
      
  - entry: TRUNCATE
    help: |
      Delete all data from a table.
      
      Syntax:
      
        TRUNCATE <tablename>;
      
      Example:
      
        TRUNCATE mytable 
      
  - entry: DROP
    help: |
      The DROP command can be used with different targets. For
      more information check one of the following:
      
        > help drop keyspace
        > help drop table
        > help drop index
        > help drop trigger
      
  - entry: DROP_INDEX
    help: |
      Remove an existing index.
      
      Syntax:
      
        DROP INDEX (IF EXISTS)? <index_name>;
      
      Example:
      
        DROP INDEX users_name_index;
      
  - entry: DROP_TABLE
    help: |
      Remove an existing table.
      
      Syntax:
      
        DROP TABLE (IF EXISTS)? <tablename>;
      
      Example:
      
        DROP TABLE IF EXISTS users;
      
  - entry: DROP_KEYSPACE
    help: |
      Remove an existing keyspace.
      
      Syntax:
      
        DROP KEYSPACE (IF EXISTS) <keyspace>;
      
      Example:
      
        DROP KEYSPACE IF EXISTS application_0;
      
  - entry: DROP_TRIGGER
    help: |
      Remove an existing trigger.
      
      Syntax:
      
        DROP TRIGGER <trigger_name> ON <tablename>;
      
      Example:
      
        DROP TRIGGER update_stats ON users;
      
  - entry: SELECT
    help: |
      Retrieve a subset of data from an existing table.
      
      Syntax:
      
        SELECT <select-clause> FROM <tablename>
          ( WITH WINDOW (LAST | (<n> (ROWS|<time-unit>)))?
          ( INNER JOIN <tablename> ON <field1>=<field2>...)?
          ( WHERE <where-clause> )?
          ( ORDER BY <order-by> )?
          ( GROUP BY <group-by>)?
          ( LIMIT <integer> )?
          ( DISABLE ANALYTICS )?

        where,
        - <select-clause> contains the list of columns to be retrieved
        - WITH WINDOW permits to specify the selection window. This
          option is ONLY AVAILABLE when retrieving data from EPHEMERAL
          tables. The supported options are:
          - LAST: The select statement is executed on the last available
            tuple.
          - <n> ROWS: The select statement is executed on the last <n>
            tuples.
          - <n> <time-unit>: The select statement is executed with the
            tuples received in the last <n> SECONDS, MINUTES, HOURS
            or DAYS.
        - INNER JOIN permits to combine two tables A and B by comparing
          each row in A with each one in B selecting all rows that match
          the join-predicate.
        - WHERE <where-clause> specifies the conditions that a row in 
          <tablename> needs to fulfil in order to be selected.
        - ORDER BY <order-by> specifies the ordering criteria.
        - GROUP BY <group-by> specifies the grouping criteria.
        - LIMIT <integer> specifies the maximum number of rows to be
          returned.
        - DISABLE ANALYTICS disables the use of intelligent analytics
          provided by platform relying only the Cassandra specification.

      
      Example:
      
        SELECT column1 FROM table1 WITH WINDOW 5 SECONDS WHERE column2 = 3;
      
  - entry: ADD
    help: |
      Add the classes of a JAR to the META system. The JAR file is inspected
      looking for:
        - Classes annotated as UDFs.
        - Classes annotated as Triggers.
        - Classes annotated as Custom indexes.

      Syntax:
      
        ADD <jar-path>;
      
      Example:
      
        ADD "/home/user/custom.jar";
      
  - entry: LIST
    help: |
      The LIST command can be used with different targets. For
      more information check one of the following:
      
        > help list process
        > help list udf
        > help list trigger
      
  - entry: LIST_PROCESS
    help: |
      List the running queries.
    
      Syntax:
      
        LIST PROCESS;
      
  - entry: LIST_UDF
    help: |
      List the UDF available in the current session.
    
      Syntax:
      
        LIST UDF;
      
  - entry: LIST_TRIGGER
    help: |
      List the existing triggers.
    
      Syntax:
      
        LIST TRIGGER;
      
  - entry: REMOVE_UDF
    help: |
      Removes all udfs declared in a jar file.
      
      Syntax:
      
      REMOVE UDF <jar_name>;
      
  - entry: DELETE
    help: |
      Delete a complete rows or set of columns of a set of rows.
      
      Syntax:
        DELETE ( <column> (, <column> )* )?
          FROM <tablename>
          WHERE <where-clause>;      

      Example:
      
        DELETE FROM table1 WHERE field1 = value1;
      
  - entry: SET_OPTIONS
    help: |
     Set the session options.
     
     Syntax:
       SET OPTIONS <option> = <option_value> (AND <option> = <option_value>);

       where the available options are:
       - ANALYTICS: Enables or disables the use of intelligent analytics
         provided by platform relying only the Cassandra specification. It 
         accepts values true or false. By default analytics are enabled.
       - CONSISTENCY: Modifies the level of consistency required to perform
         a read/write operation. It takes the values ALL, ANY, QUORUM, ONE,
         TWO, THREE, EACH_QUORUM, LOCAL_ONE, and LOCAL_QUORUM with the
         default Cassandra semantics.
     
     Example:
     
       SET OPTIONS ANALYTICS=true AND CONSISTENCY=LOCAL_ONE;
     
  - entry: EXPLAIN_PLAN
    help: |
      Inspect the query plan without executing the query.
      
      Syntax:
      
        EXPLAIN PLAN <query>;
      
      Example:
      
        EXPLAIN PLAN SELECT * FROM users;
      
  - entry: ALTER
    help: |
      The ALTER command can be used with different targets. For
      more information check one of the following:
      
        > help alter keyspace
        > help alter table
      
  - entry: ALTER_KEYSPACE
    help: |
      Alter the configuration of a keyspace.
      
      Syntax:
      
        ALTER KEYSPACE <keyspace_name> WITH <properties>;
      
        where the <properties> match the ones specified during
        the keyspace creation.

      For more information check:
      
        > help create keyspace
      
  - entry: ALTER_TABLE
    help: |
      Alter the structure of a table.
      
      Syntax:
      
        ALTER TABLE <tablename> <instruction> ;
        <instruction> ::= ALTER <identifier> TYPE <type>
                        | ADD   <identifier> <type>
                        | DROP  <identifier>
                        | WITH  <option> ( AND <option> )*
        
        where
        - ALTER modifies the type of a column.
        - ADD defines a new column.
        - DROP removes a column
        - WITH specifies the options. The set of available options
          match the ones of the CREATE TABLE statement.

      Example:
      
        ALTER TABLE users ADD number_connections INT;
      
      For more information check:
      
        > help create table

  - entry: STOP
    help: |
      Stop a running process in the system.
      
      Syntax:
      
        STOP <process_id>;
      
      Example:
      
        STOP query_1;
      
      For more information check
      
      > help list process
